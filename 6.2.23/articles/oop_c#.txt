C# provides full support for object-oriented programming including encapsulation, inheritance, and polymorphism.
Encapsulation means that a group of related properties, methods, and other members are treated as a single unit or object.
Inheritance describes the ability to create new classes based on an existing class.
Polymorphism means that you can have multiple classes that can be used interchangeably, even though each class implements the same properties or methods in different ways.
This section describes the following concepts:
Classes and Objects
Class Members
Properties and Fields
Methods
Constructors
Finalizers
Events
Nested Classes
Access Modifiers and Access Levels
Instantiating Classes
Static Classes and Members
Anonymous Types
Inheritance
Overriding Members
Interfaces
Generics
Delegates
Classes and Objects
The terms class and object are sometimes used interchangeably, but in fact, classes describe the type of objects, while objects are usable instances of classes. So, the act of creating an object is called instantiation. Using the blueprint analogy, a class is a blueprint, and an object is a building made from that blueprint. 
C# also provides a light version of classes called structures that are useful when you need to create large array of objects and do not want to consume too much memory for that.